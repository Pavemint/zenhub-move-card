(()=>{var __webpack_modules__={75:module=>{module.exports=eval("require")("@actions/core")},788:module=>{module.exports=eval("require")("axios")},837:e=>{"use strict";e.exports=require("util")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var n=__webpack_module_cache__[e];if(n!==undefined){return n.exports}var t=__webpack_module_cache__[e]={exports:{}};var i=true;try{__webpack_modules__[e](t,t.exports,__nccwpck_require__);i=false}finally{if(i)delete __webpack_module_cache__[e]}return t.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const{default:e}=__nccwpck_require__(788);const n=__nccwpck_require__(75);const{inspect:t}=__nccwpck_require__(837);async function moveCardToPipeline(n,t,i,s){const o=`https://api.zenhub.com/p2/workspaces/${t}/repositories/${n}/issues/${i}/moves`;const r=await e.post(o,{pipeline_id:s,position:"top"});console.log(`POST ${o} -- [${r.status}]`)}async function getIdOfPipelineByName(t,i,s){const o=`https://api.zenhub.com/p2/workspaces/${i}/repositories/${t}/board`;const r=await e.get(o);console.log(`GET ${o} -- [${r.status}]`);const a=r.data.pipelines;const p=a.find((e=>e.name.indexOf(s)!==-1));if(p){return p.id}else{n.setFailed("No pipeline name of "+s+" found");return}}async function getPipelineId(e){let n;if(!e.pipelineId&&e.pipelineName){n=await getIdOfPipelineByName(e.zhRepoId,e.zhWorkspaceId,e.pipelineName)}else{n=e.pipelineId}return n}async function getIssuesFromPR(t){const i="https://api.github.com/graphql";const s=`query getIssueNumbers($url: URI!){\n    resource(url: $url) {\n      ... on PullRequest {\n        closingIssuesReferences(first: 10) {\n          nodes {\n            number\n            repository {\n              id\n            }\n          }\n        }\n      }\n    }\n  }`;try{const o=await e.post(i,{query:s,variables:{url:t.prUrl}},{headers:{Authorization:"Bearer "+t.githubToken,"Content-Type":"application/json"}});const r=o.resource.closingIssueReferences.nodes;n.info(`data-${r}`);return r}catch(e){n.setFailed(`Failed to get linked issues: ${e.message}`);return}}(async function(){try{const i={zhToken:n.getInput("zh-token"),zhWorkspaceId:n.getInput("zh-workspace-id"),prUrl:n.getInput("pr-url"),pipelineId:n.getInput("zh-target-pipeline-id"),pipelineName:n.getInput("zh-target-pipeline-name"),githubToken:n.getInput("github-token")};n.debug(`Inputs: ${t(i)}`);if(!i.pipelineId&&!i.pipelineName){n.setFailed("one of zh-target-pipeline-id and zh-target-pipeline-name is required");return}const s=await getIssuesFromPR(i);n.info(`Issues- ${s}`);e.defaults.headers.common["X-Authentication-Token"]=i.zhToken;const o=await getPipelineId(i);s.forEach((async e=>{await moveCardToPipeline(e.repository.id,i.zhWorkspaceId,e.number,o);n.info(`move issue ${e.number} in ${e.repo} to ${o}`)}))}catch(e){n.debug(t(e));n.setFailed(e.message)}})()})();module.exports=__webpack_exports__})();